CREATE TABLE `device` (
`id` int(11) unsigned NOT NULL AUTO_INCREMENT ,
`appid` varchar(32) NOT NULL,
`campaign` int(10) unsigned NOT NULL,
`platform` varchar(10) NOT NULL,
`device_id` varchar(64) DEFAULT NULL,
`ip` varchar(15) DEFAULT NULL,
`ds` date DEFAULT NULL,
`ds_hr` varchar(13) DEFAULT NULL ,
`time` int(13) DEFAULT NULL ,
`ext` varchar(550) DEFAULT NULL,
`p1` varchar(64) DEFAULT NULL ,
`p2` varchar(64) DEFAULT NULL,
`p3` varchar(64) DEFAULT NULL,
`p4` varchar(64) DEFAULT NULL,
`p5` varchar(64) DEFAULT NULL,
`p6_md5` varchar(32) DEFAULT NULL,
`p7_md5` varchar(32) DEFAULT NULL,
`is_matched` tinyint(1) DEFAULT '0',
`is_gaea_matched` tinyint(1) DEFAULT '0',
`insert_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (`id`),
UNIQUE KEY `appid` (`appid`,`device_id`),
KEY `ip` (`ip`),
KEY `campaing` (`campaign`)
);
CREATE TABLE `src` (
`id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT ,
`platform` varchar(10) NOT NULL ,
`appid` varchar(35) NOT NULL ,
`campaign` int(10) NOT NULL ,
`ip` varchar(15) DEFAULT NULL ,
`device_id` varchar(64) DEFAULT NULL ,
`device_id_type` varchar(5) DEFAULT NULL,
`p1` varchar(64) DEFAULT NULL ,
`p2` varchar(64) DEFAULT NULL,
`p3` varchar(64) DEFAULT NULL,
`p4` varchar(64) DEFAULT NULL,
`p5` varchar(64) DEFAULT NULL,
`p6_md5` varchar(32) DEFAULT NULL,
`p7_md5` varchar(32) DEFAULT NULL,
`ext` varchar(550) DEFAULT NULL,
`is_matched` tinyint(1) DEFAULT '0',
`ds` date NOT NULL ,
`ds_hr` varchar(13) DEFAULT NULL ,
`time` int(13) NOT NULL ,
PRIMARY KEY (`id`),
KEY `time` (`time`),
KEY `idx_campaign_ds` (`campaign`,`ds`)
);
CREATE TABLE `data` (
`id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT ,
`appid` varchar(35) NOT NULL ,
`platform` varchar(10) NOT NULL ,
`device_id` varchar(64) NOT NULL,
`device_id_md5` varchar(32) NOT NULL ,
`mac` varchar(32) DEFAULT NULL ,
`ip` varchar(15) DEFAULT NULL ,
`time` int(13) DEFAULT NULL ,
`is_matched` tinyint(1) DEFAULT '0',
PRIMARY KEY (`id`),
UNIQUE KEY `appid` (`appid`,`device_id`),
KEY `ip` (`ip`),
KEY `pattern_index` (`appid`,`device_id_md5`),
KEY `idx_time` (`time`)
);
CREATE TABLE `pay` (
`order_id` varchar(20) NOT NULL,
`user_id` bigint(20) unsigned NOT NULL,
`channel_id` int(11) unsigned NOT NULL,
`pay_time` int(11) NOT NULL DEFAULT '0',
`paid_time` int(11) DEFAULT '0',
`pay_amount` decimal(10,2) unsigned NOT NULL DEFAULT '0.00',
`pay_lcoins` decimal(10,2) NOT NULL DEFAULT '0.00',
`pay_state` tinyint(1) NOT NULL,
`transaction_id` varchar(200) DEFAULT NULL,
`pay_platform` varchar(50) NOT NULL,
`is_send` tinyint(1) NOT NULL DEFAULT '0',
`is_exchange` tinyint(1) NOT NULL DEFAULT '0',
`is_user` int(11) NOT NULL DEFAULT '0',
`pay_currency` char(10) NOT NULL DEFAULT 'CNY',
`union_id` int(16) NOT NULL DEFAULT '1',
`c_rate` decimal(10,4) unsigned NOT NULL DEFAULT '1.0000',
`product_id` int(11) unsigned NOT NULL,
`server_id` int(11) unsigned NOT NULL,
`before_lcoins` int(11) NOT NULL DEFAULT '0',
`after_lcoins` int(11) NOT NULL DEFAULT '0',
KEY `order_id` (`order_id`),
KEY `user_id` (`user_id`),
KEY `pay_time` (`pay_time`),
KEY `paid_time` (`paid_time`),
KEY `channel_id` (`channel_id`),
KEY `pay_state` (`pay_state`),
KEY `sum_payment` (`user_id`,`product_id`)
);
CREATE TABLE `reg` (
`appid` varchar(35) NOT NULL ,
`platform` varchar(10) NOT NULL ,
`device_id` varchar(64) NOT NULL ,
`gaea_id` varchar(42) NOT NULL ,
`account_id` varchar(32) NOT NULL ,
`time` int(13) DEFAULT NULL ,
`is_matched` tinyint(1) DEFAULT '0',
PRIMARY KEY (`appid`,`device_id`)
);
explain SELECT `ds`, `p1`, `p2`, `p3`, `p4`, `p5`, `p6_md5`, `p7_md5`, count(device_id) as install_device FROM `device` use index (campaing) WHERE (`ds` >= '2016-09-01') AND (`ds` <= '2016-11-03') AND (`campaign` IN ('1062', '1086', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1444', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1495', '1496', '1497', '1550', '1551', '1552', '1553', '1554', '1555', '1556', '1557', '1558', '1559', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1616', '1623', '1624', '1625', '1626', '1627', '1628', '1629', '1630', '1631', '1632', '1709', '1719', '1720', '1843', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2823', '2824', '2825', '2826', '2827', '2828', '2829', '2830', '2831', '2832', '2833', '2834', '2835', '2836', '2837', '2838', '2839', '2840', '2841', '2842', '2843', '2844', '2845', '2846', '2847', '2848', '2849', '2850', '2851', '2852', '2853', '2854', '2855', '2856', '2857', '2858', '2859', '2860', '2861', '2862', '2863', '2864', '2865', '2866', '2867', '2868', '2869', '2870', '2871', '2872', '3139', '3140', '3141', '3142', '3143', '3144', '3145', '3146', '3147', '3148', '3149', '3150', '3151', '3152', '3153', '3154', '3155', '3156', '3157', '3158', '3386', '3387', '3388', '3389', '3390', '3391', '3392', '3393', '3394', '3395', '3664', '3665', '3666', '3667', '3668', '3670', '3671', '3672', '3673', '3674', '3676', '3677', '3678', '3679', '3680', '3681', '3682', '3683', '3684', '3685', '3686', '3687', '3688', '3689', '3690', '3691', '3692', '3693', '3694', '3695', '3696', '3697', '3698', '3699', '3700', '3701', '3702', '3703', '3704', '3705', '3706', '3707', '3708', '3709', '3710', '3711', '3712', '3713', '3714', '3715', '3960', '3961', '3962', '3963', '3964', '3965', '3966', '3967', '3968', '3978', '3979', '3980', '3981', '3982', '3983', '3984', '3985', '3986', '3987', '4208', '4209', '4210', '4211', '4212', '4304', '4305', '4306', '4307', '4308', '4866', '4867', '4868', '4869', '4870', '4871', '4872', '4873', '4874', '4875')) GROUP BY `ds`, `p1`, `p2`, `p3`, `p4`, `p5`, `p6_md5`, `p7_md5` ORDER BY `ds_hr` DESC;
ID	Json	ParentID
IndexScan_8	{
    "db": "test",
    "table": "device",
    "index": "campaing",
    "ranges": "[[1062,1062] [1086,1086] [1423,1423] [1424,1424] [1425,1425] [1426,1426] [1427,1427] [1428,1428] [1429,1429] [1430,1430] [1431,1431] [1432,1432] [1433,1433] [1434,1434] [1435,1435] [1436,1436] [1437,1437] [1438,1438] [1439,1439] [1440,1440] [1441,1441] [1442,1442] [1443,1443] [1444,1444] [1445,1445] [1446,1446] [1447,1447] [1448,1448] [1449,1449] [1450,1450] [1451,1451] [1452,1452] [1488,1488] [1489,1489] [1490,1490] [1491,1491] [1492,1492] [1493,1493] [1494,1494] [1495,1495] [1496,1496] [1497,1497] [1550,1550] [1551,1551] [1552,1552] [1553,1553] [1554,1554] [1555,1555] [1556,1556] [1557,1557] [1558,1558] [1559,1559] [1597,1597] [1598,1598] [1599,1599] [1600,1600] [1601,1601] [1602,1602] [1603,1603] [1604,1604] [1605,1605] [1606,1606] [1607,1607] [1608,1608] [1609,1609] [1610,1610] [1611,1611] [1612,1612] [1613,1613] [1614,1614] [1615,1615] [1616,1616] [1623,1623] [1624,1624] [1625,1625] [1626,1626] [1627,1627] [1628,1628] [1629,1629] [1630,1630] [1631,1631] [1632,1632] [1709,1709] [1719,1719] [1720,1720] [1843,1843] [2813,2813] [2814,2814] [2815,2815] [2816,2816] [2817,2817] [2818,2818] [2819,2819] [2820,2820] [2821,2821] [2822,2822] [2823,2823] [2824,2824] [2825,2825] [2826,2826] [2827,2827] [2828,2828] [2829,2829] [2830,2830] [2831,2831] [2832,2832] [2833,2833] [2834,2834] [2835,2835] [2836,2836] [2837,2837] [2838,2838] [2839,2839] [2840,2840] [2841,2841] [2842,2842] [2843,2843] [2844,2844] [2845,2845] [2846,2846] [2847,2847] [2848,2848] [2849,2849] [2850,2850] [2851,2851] [2852,2852] [2853,2853] [2854,2854] [2855,2855] [2856,2856] [2857,2857] [2858,2858] [2859,2859] [2860,2860] [2861,2861] [2862,2862] [2863,2863] [2864,2864] [2865,2865] [2866,2866] [2867,2867] [2868,2868] [2869,2869] [2870,2870] [2871,2871] [2872,2872] [3139,3139] [3140,3140] [3141,3141] [3142,3142] [3143,3143] [3144,3144] [3145,3145] [3146,3146] [3147,3147] [3148,3148] [3149,3149] [3150,3150] [3151,3151] [3152,3152] [3153,3153] [3154,3154] [3155,3155] [3156,3156] [3157,3157] [3158,3158] [3386,3386] [3387,3387] [3388,3388] [3389,3389] [3390,3390] [3391,3391] [3392,3392] [3393,3393] [3394,3394] [3395,3395] [3664,3664] [3665,3665] [3666,3666] [3667,3667] [3668,3668] [3670,3670] [3671,3671] [3672,3672] [3673,3673] [3674,3674] [3676,3676] [3677,3677] [3678,3678] [3679,3679] [3680,3680] [3681,3681] [3682,3682] [3683,3683] [3684,3684] [3685,3685] [3686,3686] [3687,3687] [3688,3688] [3689,3689] [3690,3690] [3691,3691] [3692,3692] [3693,3693] [3694,3694] [3695,3695] [3696,3696] [3697,3697] [3698,3698] [3699,3699] [3700,3700] [3701,3701] [3702,3702] [3703,3703] [3704,3704] [3705,3705] [3706,3706] [3707,3707] [3708,3708] [3709,3709] [3710,3710] [3711,3711] [3712,3712] [3713,3713] [3714,3714] [3715,3715] [3960,3960] [3961,3961] [3962,3962] [3963,3963] [3964,3964] [3965,3965] [3966,3966] [3967,3967] [3968,3968] [3978,3978] [3979,3979] [3980,3980] [3981,3981] [3982,3982] [3983,3983] [3984,3984] [3985,3985] [3986,3986] [3987,3987] [4208,4208] [4209,4209] [4210,4210] [4211,4211] [4212,4212] [4304,4304] [4305,4305] [4306,4306] [4307,4307] [4308,4308] [4866,4866] [4867,4867] [4868,4868] [4869,4869] [4870,4870] [4871,4871] [4872,4872] [4873,4873] [4874,4874] [4875,4875]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.device.ds",
            "test.device.p1",
            "test.device.p2",
            "test.device.p3",
            "test.device.p4",
            "test.device.p5",
            "test.device.p6_md5",
            "test.device.p7_md5"
        ],
        "agg funcs": [
            "firstrow(test.device.ds)",
            "firstrow(test.device.p1)",
            "firstrow(test.device.p2)",
            "firstrow(test.device.p3)",
            "firstrow(test.device.p4)",
            "firstrow(test.device.p5)",
            "firstrow(test.device.p6_md5)",
            "firstrow(test.device.p7_md5)",
            "count(test.device.device_id)",
            "firstrow(test.device.ds_hr)"
        ],
        "access conditions": [
            "in(test.device.campaign, 1062, 1086, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1709, 1719, 1720, 1843, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3664, 3665, 3666, 3667, 3668, 3670, 3671, 3672, 3673, 3674, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 4208, 4209, 4210, 4211, 4212, 4304, 4305, 4306, 4307, 4308, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "ge(test.device.ds, 2016-09-01)",
            "le(test.device.ds, 2016-11-03)"
        ]
    }
}	HashAgg_9
HashAgg_9	{
    "AggFuncs": [
        "firstrow([test.device.ds])",
        "firstrow([test.device.p1])",
        "firstrow([test.device.p2])",
        "firstrow([test.device.p3])",
        "firstrow([test.device.p4])",
        "firstrow([test.device.p5])",
        "firstrow([test.device.p6_md5])",
        "firstrow([test.device.p7_md5])",
        "count([test.device.device_id])",
        "firstrow([test.device.ds_hr])"
    ],
    "GroupByItems": [
        "[test.device.ds test.device.p1 test.device.p2 test.device.p3 test.device.p4 test.device.p5 test.device.p6_md5 test.device.p7_md5]"
    ],
    "child": "IndexScan_8"
}	Sort_5
Sort_5	{
    "exprs": [
        {
            "Expr": "ds_hr",
            "Desc": true
        }
    ],
    "limit": null,
    "child": "HashAgg_9"
}	Trim_6
Trim_6	{
    "children": [
        "Sort_5"
    ]
}	
explain select gad.id as gid,sdk.id as sid,gad.appid as appid,gad.campaign as campaign,sdk.device_id as device_id,sdk.ip as ip, sdk.time as time, gad.p1 as p1, gad.p2 as p2, gad.p3 as p3, gad.p4 as p4, gad.p5 as p5, gad.p6_md5 as p6, gad.p7_md5 as p7, gad.ext as ext, gad.time as gtime from src gad join (select id, appid, platform, device_id, ip, time from data where platform = 'android' and is_matched = 0 and time > 1478143908) sdk on  gad.appid = sdk.appid and gad.ip = sdk.ip and sdk.time > gad.time where gad.time > 1478143908 and gad.is_matched = 0 and gad.platform = 'android' group by gad.appid, sdk.device_id limit 2500;
ID	Json	ParentID
IndexScan_13	{
    "db": "test",
    "table": "src",
    "index": "time",
    "ranges": "[(1478143908,+inf]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "gt(gad.time, 1478143908)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(gad.is_matched, 0)",
            "eq(gad.platform, android)"
        ]
    }
}	HashLeftJoin_11
IndexScan_19	{
    "db": "test",
    "table": "data",
    "index": "idx_time",
    "ranges": "[(1478143908,+inf]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "gt(test.data.time, 1478143908)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(test.data.platform, android)",
            "eq(test.data.is_matched, 0)"
        ]
    }
}	Projection_4
Projection_4	{
    "exprs": [
        "test.data.id",
        "test.data.appid",
        "test.data.device_id",
        "test.data.ip",
        "test.data.time"
    ],
    "child": "IndexScan_19"
}	HashLeftJoin_11
HashLeftJoin_11	{
    "eqCond": [
        "eq(gad.appid, sdk.appid)",
        "eq(gad.ip, sdk.ip)"
    ],
    "leftCond": null,
    "rightCond": null,
    "otherCond": [
        "gt(sdk.time, gad.time)"
    ],
    "leftPlan": "IndexScan_13",
    "rightPlan": "Projection_4"
}	HashAgg_21
HashAgg_21	{
    "AggFuncs": [
        "firstrow(gad.id)",
        "firstrow(sdk.id)",
        "firstrow(gad.appid)",
        "firstrow(gad.campaign)",
        "firstrow(sdk.device_id)",
        "firstrow(sdk.ip)",
        "firstrow(sdk.time)",
        "firstrow(gad.p1)",
        "firstrow(gad.p2)",
        "firstrow(gad.p3)",
        "firstrow(gad.p4)",
        "firstrow(gad.p5)",
        "firstrow(gad.p6_md5)",
        "firstrow(gad.p7_md5)",
        "firstrow(gad.ext)",
        "firstrow(gad.time)"
    ],
    "GroupByItems": [
        "gad.appid",
        "sdk.device_id"
    ],
    "child": "HashLeftJoin_11"
}	
	{
    "limit": 2500,
    "offset": 0,
    "child": "HashAgg_21"
}	
explain select gad.id as gid,sdk.id as sid,gad.appid as appid,gad.campaign as campaign,sdk.device_id as device_id,sdk.ip as ip, sdk.time as time, gad.p1 as p1, gad.p2 as p2, gad.p3 as p3, gad.p4 as p4, gad.p5 as p5, gad.p6_md5 as p6, gad.p7_md5 as p7, gad.ext as ext from src gad join data sdk on gad.appid = sdk.appid and gad.device_id = sdk.mac and gad.time < sdk.time where gad.time > 1477971479 and gad.is_matched = 0 and gad.platform = 'ios' and gad.device_id_type = 'mac' and sdk.time > 1477971479 and sdk.is_matched = 0 and sdk.platform = 'ios' limit 3000;
ID	Json	ParentID
IndexScan_11	{
    "db": "test",
    "table": "src",
    "index": "time",
    "ranges": "[(1477971479,+inf]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "gt(gad.time, 1477971479)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(gad.is_matched, 0)",
            "eq(gad.platform, ios)",
            "eq(gad.device_id_type, mac)"
        ]
    }
}	HashLeftJoin_9
IndexScan_17	{
    "db": "test",
    "table": "data",
    "index": "idx_time",
    "ranges": "[(1477971479,+inf]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "gt(sdk.time, 1477971479)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(sdk.is_matched, 0)",
            "eq(sdk.platform, ios)"
        ]
    }
}	HashLeftJoin_9
HashLeftJoin_9	{
    "eqCond": [
        "eq(gad.appid, sdk.appid)",
        "eq(gad.device_id, sdk.mac)"
    ],
    "leftCond": null,
    "rightCond": null,
    "otherCond": [
        "lt(gad.time, sdk.time)"
    ],
    "leftPlan": "IndexScan_11",
    "rightPlan": "IndexScan_17"
}	
	{
    "limit": 3000,
    "offset": 0,
    "child": "HashLeftJoin_9"
}	Projection_5
Projection_5	{
    "exprs": [
        "gad.id",
        "sdk.id",
        "gad.appid",
        "gad.campaign",
        "sdk.device_id",
        "sdk.ip",
        "sdk.time",
        "gad.p1",
        "gad.p2",
        "gad.p3",
        "gad.p4",
        "gad.p5",
        "gad.p6_md5",
        "gad.p7_md5",
        "gad.ext"
    ],
    "child": ""
}	
explain SELECT campaign, p1, p2, p3, p4, p5, p6_md5, p7_md5, count(1) as click_pv, count(DISTINCT ip) as click_ip FROM src WHERE (time between 1478188800 and 1478275200) and appid='cn.sbkcq' and platform='android' GROUP BY campaign, p1, p2, p3, p4, p5, p6_md5, p7_md5;
ID	Json	ParentID
IndexScan_6	{
    "db": "test",
    "table": "src",
    "index": "time",
    "ranges": "[[1478188800,1478275200]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "ge(test.src.time, 1478188800)",
            "le(test.src.time, 1478275200)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(test.src.appid, cn.sbkcq)",
            "eq(test.src.platform, android)"
        ]
    }
}	HashAgg_8
HashAgg_8	{
    "AggFuncs": [
        "firstrow(test.src.campaign)",
        "firstrow(test.src.p1)",
        "firstrow(test.src.p2)",
        "firstrow(test.src.p3)",
        "firstrow(test.src.p4)",
        "firstrow(test.src.p5)",
        "firstrow(test.src.p6_md5)",
        "firstrow(test.src.p7_md5)",
        "count(1)",
        "count(test.src.ip)"
    ],
    "GroupByItems": [
        "test.src.campaign",
        "test.src.p1",
        "test.src.p2",
        "test.src.p3",
        "test.src.p4",
        "test.src.p5",
        "test.src.p6_md5",
        "test.src.p7_md5"
    ],
    "child": "IndexScan_6"
}	
explain select device.id as id, device.appid as appid, device.platform as platform, device.device_id as device_id, device.campaign as campaign, reg.gaea_id as gaea_id, reg.account_id as account_id, reg.time as time,device.p1 as p1, device.p2 as p2, device.p3 as p3, device.p4 as p4, device.p5 as p5, device.p6_md5 as p6, device.p7_md5 as p7 from device device join reg reg on (reg.platform = 'ios' and reg.time > 1478185592 and device.appid = reg.appid and device.device_id = reg.device_id) where device.platform = 'ios' and device.time > 1478185592 and device.is_matched = 0 limit 2000;
ID	Json	ParentID
TableScan_10	{
    "db": "test",
    "table": "device",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": [
            "eq(device.platform, ios)",
            "gt(device.time, 1478185592)",
            "eq(device.is_matched, 0)"
        ]
    }
}	HashLeftJoin_9
TableScan_14	{
    "db": "test",
    "table": "reg",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": [
            "eq(reg.platform, ios)",
            "gt(reg.time, 1478185592)"
        ]
    }
}	HashLeftJoin_9
HashLeftJoin_9	{
    "eqCond": [
        "eq(device.appid, reg.appid)",
        "eq(device.device_id, reg.device_id)"
    ],
    "leftCond": null,
    "rightCond": null,
    "otherCond": null,
    "leftPlan": "TableScan_10",
    "rightPlan": "TableScan_14"
}	
	{
    "limit": 2000,
    "offset": 0,
    "child": "HashLeftJoin_9"
}	Projection_5
Projection_5	{
    "exprs": [
        "device.id",
        "device.appid",
        "device.platform",
        "device.device_id",
        "device.campaign",
        "reg.gaea_id",
        "reg.account_id",
        "reg.time",
        "device.p1",
        "device.p2",
        "device.p3",
        "device.p4",
        "device.p5",
        "device.p6_md5",
        "device.p7_md5"
    ],
    "child": ""
}	
explain select pay_currency,c_rate,count(DISTINCT user_id) as pay_users,count(order_id) as pay_times,sum(pay_amount) as pay_amount from pay where pay_state=2  and pay_time>=1478188800 and pay_time<1478275200  and product_id in ('510017','520017') and user_id in ('18089709','18090780') group by pay_currency,c_rate;
ID	Json	ParentID
IndexScan_12	{
    "db": "test",
    "table": "pay",
    "index": "sum_payment",
    "ranges": "[[18089709 510017,18089709 510017] [18089709 520017,18089709 520017] [18090780 510017,18090780 510017] [18090780 520017,18090780 520017]]",
    "desc": false,
    "out of order": true,
    "double read": true,
    "push down info": {
        "limit": 0,
        "access conditions": [
            "in(test.pay.user_id, 18089709, 18090780)",
            "in(test.pay.product_id, 510017, 520017)"
        ],
        "index filter conditions": null,
        "table filter conditions": [
            "eq(test.pay.pay_state, 2)",
            "ge(test.pay.pay_time, 1478188800)",
            "lt(test.pay.pay_time, 1478275200)"
        ]
    }
}	HashAgg_13
HashAgg_13	{
    "AggFuncs": [
        "firstrow(test.pay.pay_currency)",
        "firstrow(test.pay.c_rate)",
        "count(test.pay.user_id)",
        "count(test.pay.order_id)",
        "sum(test.pay.pay_amount)"
    ],
    "GroupByItems": [
        "test.pay.pay_currency",
        "test.pay.c_rate"
    ],
    "child": "IndexScan_12"
}	
CREATE TABLE `tbl_001` (`a` int, `b` int);
CREATE TABLE `tbl_002` (`a` int, `b` int);
CREATE TABLE `tbl_003` (`a` int, `b` int);
CREATE TABLE `tbl_004` (`a` int, `b` int);
CREATE TABLE `tbl_005` (`a` int, `b` int);
CREATE TABLE `tbl_006` (`a` int, `b` int);
CREATE TABLE `tbl_007` (`a` int, `b` int);
CREATE TABLE `tbl_008` (`a` int, `b` int);
CREATE TABLE `tbl_009` (`a` int, `b` int);
explain select sum(a) from (select * from tbl_001 union all select * from tbl_002 union all select * from tbl_003 union all select * from tbl_004 union all select * from tbl_005 union all select * from tbl_006 union all select * from tbl_007 union all select * from tbl_008 union all select * from tbl_009) x group by b;
ID	Json	ParentID
TableScan_32	{
    "db": "test",
    "table": "tbl_001",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_001.b"
        ],
        "agg funcs": [
            "sum(test.tbl_001.a)",
            "firstrow(test.tbl_001.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_33
HashAgg_33	{
    "AggFuncs": [
        "sum([test.tbl_001.a])",
        "firstrow([test.tbl_001.b])"
    ],
    "GroupByItems": [
        "[test.tbl_001.b]"
    ],
    "child": "TableScan_32"
}	Union_1
TableScan_36	{
    "db": "test",
    "table": "tbl_002",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_002.b"
        ],
        "agg funcs": [
            "sum(test.tbl_002.a)",
            "firstrow(test.tbl_002.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_37
HashAgg_37	{
    "AggFuncs": [
        "sum([test.tbl_002.a])",
        "firstrow([test.tbl_002.b])"
    ],
    "GroupByItems": [
        "[test.tbl_002.b]"
    ],
    "child": "TableScan_36"
}	Union_1
TableScan_40	{
    "db": "test",
    "table": "tbl_003",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_003.b"
        ],
        "agg funcs": [
            "sum(test.tbl_003.a)",
            "firstrow(test.tbl_003.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_41
HashAgg_41	{
    "AggFuncs": [
        "sum([test.tbl_003.a])",
        "firstrow([test.tbl_003.b])"
    ],
    "GroupByItems": [
        "[test.tbl_003.b]"
    ],
    "child": "TableScan_40"
}	Union_1
TableScan_44	{
    "db": "test",
    "table": "tbl_004",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_004.b"
        ],
        "agg funcs": [
            "sum(test.tbl_004.a)",
            "firstrow(test.tbl_004.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_45
HashAgg_45	{
    "AggFuncs": [
        "sum([test.tbl_004.a])",
        "firstrow([test.tbl_004.b])"
    ],
    "GroupByItems": [
        "[test.tbl_004.b]"
    ],
    "child": "TableScan_44"
}	Union_1
TableScan_48	{
    "db": "test",
    "table": "tbl_005",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_005.b"
        ],
        "agg funcs": [
            "sum(test.tbl_005.a)",
            "firstrow(test.tbl_005.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_49
HashAgg_49	{
    "AggFuncs": [
        "sum([test.tbl_005.a])",
        "firstrow([test.tbl_005.b])"
    ],
    "GroupByItems": [
        "[test.tbl_005.b]"
    ],
    "child": "TableScan_48"
}	Union_1
TableScan_52	{
    "db": "test",
    "table": "tbl_006",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_006.b"
        ],
        "agg funcs": [
            "sum(test.tbl_006.a)",
            "firstrow(test.tbl_006.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_53
HashAgg_53	{
    "AggFuncs": [
        "sum([test.tbl_006.a])",
        "firstrow([test.tbl_006.b])"
    ],
    "GroupByItems": [
        "[test.tbl_006.b]"
    ],
    "child": "TableScan_52"
}	Union_1
TableScan_56	{
    "db": "test",
    "table": "tbl_007",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_007.b"
        ],
        "agg funcs": [
            "sum(test.tbl_007.a)",
            "firstrow(test.tbl_007.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_57
HashAgg_57	{
    "AggFuncs": [
        "sum([test.tbl_007.a])",
        "firstrow([test.tbl_007.b])"
    ],
    "GroupByItems": [
        "[test.tbl_007.b]"
    ],
    "child": "TableScan_56"
}	Union_1
TableScan_60	{
    "db": "test",
    "table": "tbl_008",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_008.b"
        ],
        "agg funcs": [
            "sum(test.tbl_008.a)",
            "firstrow(test.tbl_008.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_61
HashAgg_61	{
    "AggFuncs": [
        "sum([test.tbl_008.a])",
        "firstrow([test.tbl_008.b])"
    ],
    "GroupByItems": [
        "[test.tbl_008.b]"
    ],
    "child": "TableScan_60"
}	Union_1
TableScan_64	{
    "db": "test",
    "table": "tbl_009",
    "desc": false,
    "keep order": false,
    "push down info": {
        "limit": 0,
        "aggregated push down": true,
        "gby items": [
            "test.tbl_009.b"
        ],
        "agg funcs": [
            "sum(test.tbl_009.a)",
            "firstrow(test.tbl_009.b)"
        ],
        "access conditions": null,
        "index filter conditions": null,
        "table filter conditions": null
    }
}	HashAgg_65
HashAgg_65	{
    "AggFuncs": [
        "sum([test.tbl_009.a])",
        "firstrow([test.tbl_009.b])"
    ],
    "GroupByItems": [
        "[test.tbl_009.b]"
    ],
    "child": "TableScan_64"
}	Union_1
Union_1	{
    "children": [
        "HashAgg_33",
        "HashAgg_37",
        "HashAgg_41",
        "HashAgg_45",
        "HashAgg_49",
        "HashAgg_53",
        "HashAgg_57",
        "HashAgg_61",
        "HashAgg_65"
    ]
}	HashAgg_68
HashAgg_68	{
    "AggFuncs": [
        "sum(join_agg_0)"
    ],
    "GroupByItems": [
        "x.b"
    ],
    "child": "Union_1"
}	
